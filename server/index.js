import 'dotenv/config';
import express from 'express';
import cors from 'cors';
import algosdk from 'algosdk';
import crypto from 'crypto';
import axios from 'axios';

const app = express();
const PORT = 3001;

// Middleware
app.use(cors());
app.use(express.json());

// Network configurations
const NETWORK_CONFIGS = {
  testnet: {
    name: 'TestNet',
    algodToken: '',
    algodServer: 'https://testnet-api.4160.nodely.dev',
    algodPort: 443
  },
  mainnet: {
    name: 'MainNet',
    algodToken: '',
    algodServer: 'https://mainnet-api.4160.nodely.dev',
    algodPort: 443
  }
};

// Create Algorand client for specific network
function createAlgodClient(network = 'testnet') {
  const config = NETWORK_CONFIGS[network];
  if (!config) {
    throw new Error(`Unsupported network: ${network}`);
  }
  
  return new algosdk.Algodv2(config.algodToken, config.algodServer, config.algodPort);
}

// Initialize Pica/Resend email service
const picaSecretKey = process.env.PICA_SECRET_KEY;
const picaConnectionKey = process.env.PICA_RESEND_CONNECTION_KEY;
const picaFromEmail = process.env.PICA_FROM_EMAIL;

const isValidPicaConfig = 
  picaSecretKey && 
  picaConnectionKey && 
  picaFromEmail &&
  picaSecretKey !== 'your_pica_secret_key' &&
  picaConnectionKey !== 'your_pica_resend_connection_key' &&
  picaFromEmail !== 'noreply@randcash.app';

if (isValidPicaConfig) {
  console.log('✅ Pica/Resend email service configured');
} else {
  console.log('📧 Pica/Resend not configured - Email notifications will be simulated');
}

// Generate secure random claim code
function generateClaimCode() {
  return crypto.randomBytes(16).toString('hex').toUpperCase();
}

// Hash claim code for smart contract
function hashClaimCode(code) {
  return crypto.createHash('sha256').update(code).digest();
}

// Create PyTEAL-based escrow contract
function createEscrowContractTeal(hashedClaimCode, recipientHash, amount) {
  // This is a simplified TEAL program that would be generated by PyTEAL
  // In production, you'd use PyTEAL to generate this programmatically
  const tealProgram = `#pragma version 8

// This is an escrow contract that holds funds until claimed with correct code
// Global state: 
// - "claim_hash": the hashed claim code
// - "amount": the amount to be claimed
// - "claimed": whether funds have been claimed

txn TypeEnum
int appl // ApplicationCall
==
bnz handle_app_call

// Handle payment transactions
txn TypeEnum
int pay
==
bnz handle_payment

// Reject other transaction types
int 0
return

handle_payment:
// Allow funding the contract
txn Receiver
global CurrentApplicationAddress
==
assert
int 1
return

handle_app_call:
// Check application call method
txn ApplicationArgs 0
byte "claim"
==
bnz handle_claim

txn ApplicationArgs 0
byte "setup"
==
bnz handle_setup

// Default reject
int 0
return

handle_setup:
// Initialize the contract with claim hash
txn ApplicationArgs 1
len
int 32
==
assert

// Store the claim hash
byte "claim_hash"
txn ApplicationArgs 1
app_global_put

// Store the amount
byte "amount"
txn ApplicationArgs 2
btoi
app_global_put

// Mark as not claimed
byte "claimed"
int 0
app_global_put

int 1
return

handle_claim:
// Verify claim code hash
txn ApplicationArgs 1
len
int 32
==
assert

// Check if already claimed
byte "claimed"
app_global_get
int 0
==
assert

// Verify the claim code hash matches
byte "claim_hash"
app_global_get
txn ApplicationArgs 1
==
assert

// Mark as claimed
byte "claimed"
int 1
app_global_put

// Transfer funds to claimer
itxn_begin
int pay
itxn_field TypeEnum
txn Sender
itxn_field Receiver
byte "amount"
app_global_get
itxn_field Amount
itxn_submit

int 1
return`;

  return tealProgram;
}

// Compile TEAL program
async function compileTealProgram(tealSource, network = 'testnet') {
  try {
    const algodClient = createAlgodClient(network);
    const compileResponse = await algodClient.compile(tealSource).do();
    return {
      compiledProgram: new Uint8Array(Buffer.from(compileResponse.result, 'base64')),
      hash: compileResponse.hash
    };
  } catch (error) {
    console.error('Error compiling TEAL program:', error);
    throw new Error('Failed to compile smart contract');
  }
}

// Deploy smart contract to Algorand
async function deployContract(compiledProgram, senderAddress, claimHash, amount, network = 'testnet') {
  try {
    const algodClient = createAlgodClient(network);
    const suggestedParams = await algodClient.getTransactionParams().do();
    
    // Create application creation transaction
    const appCreateTxn = algosdk.makeApplicationCreateTxnFromObject({
      from: senderAddress,
      suggestedParams,
      onComplete: 0, // NoOpOC - using explicit numeric value instead of algosdk.OnApplicationComplete.NoOpOC
      approvalProgram: compiledProgram,
      clearProgram: new Uint8Array([0x06, 0x81, 0x01]), // Simple clear program
      numLocalInts: 0,
      numLocalByteSlices: 0,
      numGlobalInts: 2, // amount, claimed
      numGlobalByteSlices: 1, // claim_hash
      appArgs: [
        new TextEncoder().encode('setup'),
        claimHash,
        algosdk.encodeUint64(amount * 1000000) // Convert ALGO to microAlgos
      ]
    });

    return {
      transaction: appCreateTxn,
      txId: appCreateTxn.txID()
    };
  } catch (error) {
    console.error('Error creating contract deployment transaction:', error);
    throw new Error('Failed to create contract deployment transaction');
  }
}

// Send email notification via Pica/Resend
async function sendEmailNotification(recipient, claimCode, amount, message, network = 'testnet') {
  const networkName = NETWORK_CONFIGS[network].name;
  
  try {
    if (!isValidPicaConfig) {
      const notificationMessage = `You've received ${amount} ALGO on RandCash (${networkName})! ${message ? `Message: "${message}"` : ''} Use claim code: ${claimCode} to claim your funds.`;
      console.log(`📧 [SIMULATED EMAIL] To: ${recipient}: ${notificationMessage}`);
      return { success: true, method: 'email_simulation' };
    }

    const emailData = {
      from: `RandCash <${picaFromEmail}>`,
      to: recipient,
      subject: `You've received ${amount} ALGO on RandCash (${networkName})!`,
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
          <div style="text-align: center; margin-bottom: 30px;">
            <div style="display: inline-block; width: 60px; height: 60px; background: linear-gradient(135deg, #2563eb, #4f46e5); border-radius: 12px; display: flex; align-items: center; justify-content: center; margin-bottom: 16px;">
              <span style="color: white; font-size: 24px;">💸</span>
            </div>
            <h1 style="color: #1f2937; margin: 0; font-size: 28px; font-weight: bold;">You've received ${amount} ALGO!</h1>
          </div>
          
          <div style="background: #f8fafc; border-radius: 12px; padding: 24px; margin: 24px 0;">
            <p style="color: #374151; font-size: 16px; line-height: 1.6; margin: 0 0 16px 0;">
              Someone sent you cryptocurrency using RandCash on Algorand ${networkName}.
            </p>
            ${message ? `
              <div style="background: white; border-radius: 8px; padding: 16px; margin: 16px 0; border-left: 4px solid #2563eb;">
                <p style="color: #6b7280; font-size: 14px; margin: 0 0 4px 0; font-weight: 600;">Message:</p>
                <p style="color: #1f2937; font-size: 16px; margin: 0; font-style: italic;">"${message}"</p>
              </div>
            ` : ''}
          </div>
          
          <div style="background: linear-gradient(135deg, #eff6ff, #dbeafe); border-radius: 12px; padding: 24px; margin: 24px 0; text-align: center;">
            <p style="color: #1e40af; font-size: 16px; font-weight: 600; margin: 0 0 12px 0;">Your Claim Code:</p>
            <div style="background: white; border-radius: 8px; padding: 16px; margin: 12px 0; border: 2px solid #2563eb;">
              <p style="font-family: 'Courier New', monospace; font-size: 24px; font-weight: bold; color: #1f2937; margin: 0; letter-spacing: 2px;">
                ${claimCode}
              </p>
            </div>
            <p style="color: #1e40af; font-size: 14px; margin: 12px 0 0 0;">
              Keep this code safe - you'll need it to claim your funds!
            </p>
          </div>
          
          <div style="text-align: center; margin: 32px 0;">
            <a href="https://randcash.app" style="display: inline-block; background: linear-gradient(135deg, #2563eb, #4f46e5); color: white; text-decoration: none; padding: 14px 28px; border-radius: 8px; font-weight: 600; font-size: 16px;">
              Claim Your Funds →
            </a>
          </div>
          
          <div style="border-top: 1px solid #e5e7eb; padding-top: 20px; margin-top: 32px;">
            <p style="color: #6b7280; font-size: 12px; text-align: center; margin: 0;">
              Network: Algorand ${networkName} • Powered by RandCash
            </p>
          </div>
        </div>
      `,
      text: `You've received ${amount} ALGO on RandCash (${networkName})!

${message ? `Message: "${message}"` : ''}

Your claim code: ${claimCode}

Visit RandCash to claim your funds by entering this code and connecting your wallet.

Network: Algorand ${networkName}`,
      tags: [
        { name: 'service', value: 'randcash' },
        { name: 'type', value: 'claim_notification' },
        { name: 'network', value: network }
      ]
    };

    const response = await axios.post('https://api.picaos.com/v1/passthrough/email', emailData, {
      headers: {
        'Content-Type': 'application/json',
        'x-pica-secret': picaSecretKey,
        'x-pica-connection-key': picaConnectionKey,
        'x-pica-action-id': 'conn_mod_def::GC4q4JE4I28::x8Elxo0VRMK1X-uH1C3NeA',
      }
    });

    console.log(`✅ Email sent successfully! ID: ${response.data.id}`);
    return { success: true, method: 'email', emailId: response.data.id };

  } catch (error) {
    console.error('Error sending email:', error.response?.data || error.message);
    // Don't fail the entire transaction if notification fails
    return { 
      success: false, 
      error: error.response?.data?.message || error.message, 
      method: 'email' 
    };
  }
}

// Root endpoint to confirm server is running
app.get('/', (req, res) => {
  res.json({ 
    message: 'RandCash API Server is running!',
    version: '1.0.0',
    endpoints: [
      'GET /api/health',
      'POST /api/create-claim',
      'POST /api/submit-transaction'
    ],
    timestamp: new Date().toISOString()
  });
});

// API endpoint to create claim
app.post('/api/create-claim', async (req, res) => {
  try {
    const { amount, recipient, message, senderAddress, network = 'testnet' } = req.body;

    // Validate network
    if (!NETWORK_CONFIGS[network]) {
      return res.status(400).json({ error: 'Invalid network specified' });
    }

    // Validate input
    if (!amount || amount <= 0) {
      return res.status(400).json({ error: 'Invalid amount' });
    }
    
    if (!recipient || !recipient.trim()) {
      return res.status(400).json({ error: 'Recipient email is required' });
    }
    
    // Validate email format
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(recipient.trim())) {
      return res.status(400).json({ error: 'Please provide a valid email address' });
    }
    
    if (!senderAddress) {
      return res.status(400).json({ error: 'Sender address is required' });
    }

    // Validate sender address format
    if (!algosdk.isValidAddress(senderAddress)) {
      return res.status(400).json({ error: 'Invalid sender address' });
    }

    // Additional validation for MainNet
    if (network === 'mainnet' && amount > 10) {
      return res.status(400).json({ error: 'Maximum amount on MainNet is 10 ALGO for safety' });
    }

    console.log(`Creating claim for ${amount} ALGO from ${senderAddress} to ${recipient} on ${NETWORK_CONFIGS[network].name}`);

    // Generate claim code and hash it
    const claimCode = generateClaimCode();
    const hashedClaimCode = hashClaimCode(claimCode);
    
    // Create recipient hash (for additional security)
    const recipientHash = crypto.createHash('sha256').update(recipient.toLowerCase().trim()).digest();

    // Create TEAL program
    const tealProgram = createEscrowContractTeal(hashedClaimCode, recipientHash, amount);
    
    // Compile the TEAL program
    const { compiledProgram, hash: programHash } = await compileTealProgram(tealProgram, network);
    
    // Create contract deployment transaction
    const { transaction: deployTxn, txId } = await deployContract(
      compiledProgram, 
      senderAddress, 
      hashedClaimCode, 
      amount,
      network
    );

    // Send email notification
    const notificationResult = await sendEmailNotification(recipient, claimCode, amount, message, network);
    
    console.log(`Claim created successfully on ${NETWORK_CONFIGS[network].name}:`);
    console.log(`- Claim code: ${claimCode}`);
    console.log(`- Transaction ID: ${txId}`);
    console.log(`- Program hash: ${programHash}`);
    console.log(`- Email notification: ${notificationResult.success ? 'sent' : 'failed'}`);

    // Return the response with transaction to be signed
    res.json({
      claimCode,
      transactionId: txId,
      programHash,
      deploymentTransaction: Buffer.from(algosdk.encodeUnsignedTransaction(deployTxn)).toString('base64'),
      notificationSent: notificationResult.success,
      notificationMethod: notificationResult.method,
      emailId: notificationResult.emailId
    });

  } catch (error) {
    console.error('Error creating claim:', error);
    res.status(500).json({ 
      error: error.message || 'Internal server error occurred while creating claim' 
    });
  }
});

// API endpoint to submit signed transaction
app.post('/api/submit-transaction', async (req, res) => {
  try {
    const { signedTransaction, network = 'testnet' } = req.body;
    
    // Validate network
    if (!NETWORK_CONFIGS[network]) {
      return res.status(400).json({ error: 'Invalid network specified' });
    }
    
    if (!signedTransaction) {
      return res.status(400).json({ error: 'Signed transaction is required' });
    }

    const algodClient = createAlgodClient(network);

    // Decode and submit the signed transaction
    const signedTxnBuffer = Buffer.from(signedTransaction, 'base64');
    const txResponse = await algodClient.sendRawTransaction(signedTxnBuffer).do();
    
    // Wait for confirmation
    const confirmedTxn = await algosdk.waitForConfirmation(algodClient, txResponse.txId, 4);
    
    // Get the application ID from the confirmed transaction
    const appId = confirmedTxn['application-index'];
    const appAddress = algosdk.getApplicationAddress(appId);
    
    console.log(`Contract deployed successfully on ${NETWORK_CONFIGS[network].name}:`);
    console.log(`- Application ID: ${appId}`);
    console.log(`- Contract Address: ${appAddress}`);
    console.log(`- Transaction ID: ${txResponse.txId}`);

    res.json({
      success: true,
      transactionId: txResponse.txId,
      applicationId: appId,
      contractAddress: appAddress,
      confirmedRound: confirmedTxn['confirmed-round']
    });

  } catch (error) {
    console.error('Error submitting transaction:', error);
    res.status(500).json({ 
      error: error.message || 'Failed to submit transaction' 
    });
  }
});

// Health check endpoint
app.get('/api/health', async (req, res) => {
  try {
    const network = req.query.network || 'testnet';
    
    // Validate network
    if (!NETWORK_CONFIGS[network]) {
      return res.status(400).json({ error: 'Invalid network specified' });
    }

    // Test Algorand connection
    const algodClient = createAlgodClient(network);
    const status = await algodClient.status().do();
    
    res.json({ 
      status: 'OK', 
      timestamp: new Date().toISOString(),
      algorand: {
        network: NETWORK_CONFIGS[network].name,
        node: NETWORK_CONFIGS[network].algodServer,
        lastRound: status['last-round']
      },
      services: {
        email: isValidPicaConfig ? 'connected' : 'simulated'
      }
    });
  } catch (error) {
    res.status(500).json({ 
      status: 'ERROR', 
      timestamp: new Date().toISOString(),
      error: error.message 
    });
  }
});

app.listen(PORT, () => {
  console.log(`🚀 RandCash API server running on port ${PORT}`);
  console.log(`Supported networks:`);
  Object.entries(NETWORK_CONFIGS).forEach(([key, config]) => {
    console.log(`  - ${config.name}: ${config.algodServer}`);
  });
  console.log(`📍 Health check: http://localhost:${PORT}/api/health`);
  console.log(`📧 Pica/Resend Email: ${isValidPicaConfig ? 'Configured' : 'Not configured (will simulate)'}`);
});